/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 80022
 Source Host           : localhost:3306
 Source Schema         : test

 Target Server Type    : MySQL
 Target Server Version : 80022
 File Encoding         : 65001

 Date: 16/03/2021 17:12:15
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for tab_category
-- ----------------------------
DROP TABLE IF EXISTS `tab_category`;
CREATE TABLE `tab_category`  (
  `cid` int(0) NOT NULL AUTO_INCREMENT,
  `cname` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`cid`) USING BTREE,
  UNIQUE INDEX `AK_nq_categoryname`(`cname`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tab_category
-- ----------------------------
INSERT INTO `tab_category` VALUES (7, '前端');
INSERT INTO `tab_category` VALUES (1, '基础');
INSERT INTO `tab_category` VALUES (3, '多线程');
INSERT INTO `tab_category` VALUES (6, '数据库');
INSERT INTO `tab_category` VALUES (4, '数据结构');
INSERT INTO `tab_category` VALUES (2, '数组');
INSERT INTO `tab_category` VALUES (8, '进阶');
INSERT INTO `tab_category` VALUES (5, '集合');

-- ----------------------------
-- Table structure for tab_favorite
-- ----------------------------
DROP TABLE IF EXISTS `tab_favorite`;
CREATE TABLE `tab_favorite`  (
  `rid` int(0) NOT NULL,
  `date` date NOT NULL,
  `uid` int(0) NOT NULL,
  PRIMARY KEY (`rid`, `uid`) USING BTREE,
  INDEX `FK_user_favorite`(`uid`) USING BTREE,
  CONSTRAINT `FK_route_favorite` FOREIGN KEY (`rid`) REFERENCES `tab_route` (`rid`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_user_favorite` FOREIGN KEY (`uid`) REFERENCES `tab_user` (`uid`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tab_route
-- ----------------------------
DROP TABLE IF EXISTS `tab_route`;
CREATE TABLE `tab_route`  (
  `rid` int(0) NOT NULL AUTO_INCREMENT,
  `rname` varchar(5000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `price` double NOT NULL,
  `routeIntroduce` varchar(5000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `rflag` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `rdate` varchar(19) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `isThemeTour` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `count` int(0) NULL DEFAULT 0,
  `cid` int(0) NOT NULL,
  `rimage` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `sid` int(0) NULL DEFAULT NULL,
  `sourceId` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`rid`) USING BTREE,
  UNIQUE INDEX `AK_nq_sourceId`(`sourceId`) USING BTREE,
  INDEX `FK_category_route`(`cid`) USING BTREE,
  INDEX `FK_seller_route`(`sid`) USING BTREE,
  CONSTRAINT `FK_category_route` FOREIGN KEY (`cid`) REFERENCES `tab_category` (`cid`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_seller_route` FOREIGN KEY (`sid`) REFERENCES `tab_seller` (`sid`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 680 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tab_route
-- ----------------------------
INSERT INTO `tab_route` VALUES (609, '古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？', 1, '//这是一个菲波拉契数列问题\r\npublic class lianxi01 {\r\n	public static void main(String[] args) {\r\n		System.out.println(\"第1个月的兔子对数:    1\");\r\n		System.out.println(\"第2个月的兔子对数:    1\");\r\n		int f1 = 1, f2 = 1, f, M = 24;    \r\n		for (int i = 3; i <= M; i++) {     \r\n			f = f2;     \r\n			f2 = f1 + f2;     \r\n			f1 = f;     \r\n			System.out.println(\"第\" + i + \"个月的兔子对数: \" + f2);        \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (610, '判断101-200之间有多少个素数，并输出所有素数。程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除， 则表明此数不是素数，反之是素数。', 1, 'public class lianxi02 {\r\n	public static void main(String[] args) {   \r\n		int count = 0;   \r\n		for (int i = 101; i < 200; i += 2) {    \r\n			boolean b = false;    \r\n			for (int j = 2; j <= Math.sqrt(i); j++)     {       \r\n				if (i % j == 0) {\r\n					b = false;\r\n					break;\r\n				}        \r\n				else           {\r\n					b = true;\r\n				}    \r\n			}       \r\n			if (b == true) {\r\n				count++;\r\n				System.out.println(i);\r\n			}                                 \r\n		}   \r\n		System.out.println(\"素数个数是: \" + count);\r\n	}\r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (611, '打印出所有的 \"水仙花数 \"，所谓 \"水仙花数 \"是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 \"水仙花数 \"，因为153=1的三次方＋5的三次方＋3的三次方。', 1, 'public class lianxi03 {\r\n	public static void main(String[] args) {    \r\n		int b1, b2, b3;    \r\n		for (int m = 101; m < 1000; m++) {     \r\n			b3 = m / 100;     \r\n			b2 = m % 100 / 10;     \r\n			b1 = m %    10;     \r\n			if ((b3 * b3 * b3 + b2 * b2 * b2 + b1 * b1 * b1) == m) {     \r\n				System.out.println(m + \"是一个水仙花数\");\r\n			}    \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (612, '将一个正整数分解质因数。例如：输入90,打印出90=233*5。程序分析：对n进行分解质因数，应先找到一个最小的质数k，然后按下述步骤完成： (1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。 (2)如果n <> k，但n能被k整除，则应打印出k的值，并用n除以k的商,作为新的正整数你n,重复执行第一步。 (3)如果n不能被k整除，则用k+1作为k的值,重复执行第一步。', 1, 'import java.util.*;\r\npublic  class lianxi04 {  \r\n	public static void main(String[] args) {       \r\n		Scanner s = new Scanner(System.in);       \r\n		System.out.print(\"请键入一个正整数:     \");       \r\n		int    n    = s.nextInt();       \r\n		int k = 2;       \r\n		System.out.print(n + \"=\");       \r\n		while (k <= n) {         \r\n			if (k == n) {\r\n				System.out.println(n);\r\n				break;\r\n			}           \r\n			else if (n % k == 0) {\r\n				System.out.print(k + \"*\");\r\n				n = n / k;\r\n			}                   \r\n			else    k++;                  \r\n		}    \r\n	}   \r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (613, '输入两个正整数m和n，求其最大公约数和最小公倍数。', 1, 'import java.util.*;\r\npublic class lianxi06     {\r\n	public static void main(String[] args) {\r\n		int     a, b, m;\r\n		Scanner s = new Scanner(System.in);\r\n		System.out.print(\"键入一个整数： \");\r\n		a = s.nextInt();\r\n		System.out.print(\"再键入一个整数： \");\r\n		b = s.nextInt();      \r\n		deff cd = new deff();      \r\n		m = cd.deff(a, b);      \r\n		int n = a * b / m;      \r\n		System.out.println(\"最大公约数: \" + m);      \r\n		System.out.println(\"最小公倍数: \" + n);\r\n	}\r\n}\r\n\r\nclass deff {\r\n	public int deff(int x, int y) {\r\n		    \r\n		int t;     \r\n		if (x < y) {\r\n			     \r\n			t = x;      \r\n			x = y;      \r\n			y = t;     \r\n		}      \r\n		while (y != 0) {\r\n			     \r\n			if (x == y) return x;      \r\n			else {\r\n				      \r\n				int k = x % y;       \r\n				x = y;       \r\n				y = k;      \r\n			}    \r\n		}    \r\n		return x;\r\n	}\r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (614, '输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。', 1, 'import java.util.*;\r\npublic class lianxi07 {\r\n	public static void main(String[] args) {\r\n		int abcCount = 0; //英文字母个数\r\n		int spaceCount = 0; //空格键个数\r\n		int numCount = 0; //数字个数\r\n		int otherCount = 0; //其他字符个数\r\n		Scanner scan = new Scanner(System.in);//扫描器接受控制台的输入信息\r\n		System.out.println(\"输入一组字符\");\r\n		String str = scan.nextLine(); //取出控制台的一行信息,也就是你输入的信息\r\n		char[] ch = str.toCharArray();//把取道的字符串变成一个char数组\r\n		for (int i = 0; i < ch.length; i++) {\r\n			if (Character.isLetter(ch[i])) {\r\n				//判断是否字母\r\n				abcCount++;\r\n			} else if (Character.isDigit(ch[i])) {\r\n				//判断是否数字\r\n				numCount++;\r\n			} else if (Character.isSpaceChar(ch[i])) {\r\n				//判断是否空格键\r\n				spaceCount++;\r\n			} else {\r\n				//以上都不是则认为是其他字符\r\n				otherCount++;\r\n			}\r\n		}\r\n		System.out.println(\"字母个数：\" + abcCount);\r\n		System.out.println(\"数字个数：\" + numCount);\r\n		System.out.println(\"空格个数：\" + spaceCount);\r\n		System.out.println(\"其他字符个数：\" + otherCount);\r\n	}\r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (615, '求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。', 1, 'import java.util.*;\r\npublic class lianxi08 {\r\n	public static void main(String[] args) {\r\n		    \r\n		long a, b = 0, sum = 0;     \r\n		Scanner s = new Scanner(System.in);     \r\n		System.out.print(\"输入数字a的值： \");     \r\n		a = s.nextInt();     \r\n		System.out.print(\"输入相加的项数：\");     \r\n		int n = s.nextInt();     \r\n		int i = 0;     \r\n		while (i < n) {\r\n			     \r\n			b = b + a;      \r\n			sum = sum + b;      \r\n			a = a * 10;      \r\n			++i;     \r\n		}     \r\n		System.out.println(sum);\r\n	}\r\n}', '1', '2021-03-15 10:08:46', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (616, '一个数如果恰好等于它的因子之和，这个数就称为 \"完数 \"。例如6=1＋2＋3.编程找出1000以内的所有完数。', 1, 'public class lianxi09 {\r\n	public static void main(String[] args) {    \r\n		System.out.println(\"1到1000的完数有： \");    \r\n		for (int i = 1; i < 1000; i++) {     \r\n			int t = 0;     \r\n			for (int j = 1; j <= i / 2; j++) {      \r\n				if (i % j == 0) {       \r\n					t = t + j;      \r\n				}     \r\n			}     \r\n			if (t == i) {      \r\n				System.out.print(i + \"     \");     \r\n			}    \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:09:17', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (617, '一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？', 1, 'public class lianxi10 {\r\n	public static void main(String[] args) {\r\n		double h = 100, s = 0;\r\n		for (int i = 1; i <= 10; i++) {\r\n			s = s + 2 * h;\r\n			h = h / 2;\r\n		}\r\n		s = s - 100;\r\n		System.out.println(\"经过路程：\" + s);\r\n		System.out.println(\"最后高度：\" + h);\r\n	}\r\n}', '1', '2021-03-15 10:09:17', '0', 1, 1, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (618, '有1、2、3、4四个数字，能组成多少个互不相同且一个数字中无重复数字的三位数？并把他们都输入。', 1, 'public class lianxi11 {\r\n	public static void main(String[] args) {    \r\n		int count = 0;    \r\n		for (int x = 1; x < 5; x++) {     \r\n			for (int y = 1; y < 5; y++) {      \r\n				for (int z = 1; z < 5; z++) {       \r\n					if (x != y && y != z && x != z) {        \r\n						count++;        \r\n						System.out.println(x * 100 + y * 10 + z);       \r\n					}      \r\n				}     \r\n			}    \r\n		}    \r\n		System.out.println(\"共有\" + count + \"个三位数\");\r\n	}\r\n}', '1', '2021-03-15 10:09:17', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (619, '企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润，求应发放奖金总数？', 1, 'import java.util.*;\r\npublic class lianxi12 {\r\n	public static void main(String[] args) {    \r\n		double x = 0, y = 0;    \r\n		System.out.print(\"输入当月利润（万）：\");    \r\n		Scanner s = new Scanner(System.in);    \r\n		x = s.nextInt();    \r\n		if (x > 0 && x <= 10) {    \r\n			y = x * 0.1;    \r\n		} else if (x > 10 && x <= 20) {     \r\n			y = 10 * 0.1 + (x - 10) * 0.075;    \r\n		} else if (x > 20 && x <= 40) {     \r\n			y = 10 * 0.1 + 10 * 0.075 + (x - 20) * 0.05;    \r\n		} else if (x > 40 && x <= 60) {     \r\n			y = 10 * 0.1 + 10 * 0.075 + 20 * 0.05 + (x - 40) * 0.03;    \r\n		} else if (x > 60 && x <= 100) {     \r\n			y = 20 * 0.175 + 20 * 0.05 + 20 * 0.03 + (x - 60) * 0.015;    \r\n		} else if (x > 100) {     \r\n			y = 20 * 0.175 + 40 * 0.08 + 40 * 0.015 + (x - 100) * 0.01;    \r\n		}    \r\n		System.out.println(\"应该提取的奖金是 \" + y + \"万\");\r\n	', '1', '2021-03-15 10:09:17', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (620, '一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？', 1, 'public class lianxi13 {\r\n	public static void main(String[] args) {    \r\n		for (int x = 1; x < 100000; x++) {     \r\n			if (Math.sqrt(x + 100) % 1 == 0) {      \r\n				if (Math.sqrt(x + 168) % 1 == 0) {       \r\n					System.out.println(x + \"加100是一个完全平方数，再加168又是一个完全平方数\");      \r\n				}     \r\n			}    \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:09:17', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (621, '输入某年某月某日，判断这一天是这一年的第几天？', 1, 'import java.util.*;\r\npublic class lianxi14 {\r\n	public static void main(String[] args) {    \r\n		int year, month, day;    \r\n		int days = 0;    \r\n		int d = 0;    \r\n		int e;    \r\n		input fymd = new input();    \r\n		do {    \r\n			e = 0;    \r\n			System.out.print(\"输入年：\");    \r\n			year = fymd.input();    \r\n			System.out.print(\"输入月：\");    \r\n			month = fymd.input();    \r\n			System.out.print(\"输入天：\");    \r\n			day = fymd.input();    \r\n			if (year < 0 || month < 0 || month > 12 || day < 0 || day > 31) {    \r\n				System.out.println(\"输入错误，请重新输入！\");    \r\n				e = 1;    \r\n			}    \r\n		} while (e == 1);     \r\n		for (int i = 1; i < month; i++) {     \r\n			switch (i) {     \r\n				case 1:\r\n					     \r\n				case 3:\r\n					     \r\n				case 5:\r\n					     \r\n				case 7:\r\n					     \r\n				case 8:\r\n					     \r\n				case 10:\r\n					     \r\n				case 12:\r\n					days = 31;     \r\n					break;     \r\n				case 4:\r\n					     \r\n				case 6:\r\n					     \r\n				case 9:\r\n					     \r\n				case 11:\r\n					days = 30;     \r\n					break;     \r\n				case 2:\r\n					if ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) {       \r\n						days = 29;      \r\n					} else {       \r\n						days = 28;      \r\n					}      \r\n					break;     \r\n			}     \r\n			d += days;     \r\n		}    \r\n		System.out.println(year + \"-\" + month + \"-\" + day + \"是这年的第\" + (d + day) + \"天。\");\r\n	}\r\n}\r\n\r\nclass input {\r\n	public int input() {    \r\n		int value = 0;    \r\n		Scanner s = new Scanner(System.in);    \r\n		value = s.nextInt();    \r\n		return value;\r\n	}\r\n}', '1', '2021-03-15 10:09:17', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (633, '输入三个整数x,y,z，请把这三个数由小到大输出。', 1, 'import java.util.*;\r\npublic class lianxi15 {\r\n	public static void main(String[] args) {    \r\n		input fnc = new input();    \r\n		int x = 0, y = 0, z = 0;    \r\n		System.out.print(\"输入第一个数字：\");     \r\n		x = fnc.input();    \r\n		System.out.print(\"输入第二个数字：\");     \r\n		y = fnc.input();    \r\n		System.out.print(\"输入第三个数字：\");     \r\n		z = fnc.input();      \r\n		if (x > y) {     \r\n			int t = x;     \r\n			x = y;     \r\n			y = t;    \r\n		}   \r\n		if (x > z) {     \r\n			int t = x;     \r\n			x = z;     \r\n			z = t;    \r\n		}   \r\n		if (y > z) {     \r\n			int t = y;     \r\n			y = z;     \r\n			z = t;    \r\n		}   \r\n		System.out.println(\"三个数字由小到大排列为： \" + x + \" \" + y + \" \" + z);\r\n	}\r\n}\r\nclass input {\r\n	public int input() {    \r\n		int value = 0;    \r\n		Scanner s = new Scanner(System.in);    \r\n		value = s.nextInt();    \r\n		return value;\r\n	}\r\n}', '1', '2021-03-15 10:09:55', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (634, '输出9*9口诀。', 1, 'public class lianxi16 {\r\n	public static void main(String[] args) {    \r\n		for (int i = 1; i < 10; i++) {     \r\n			for (int j = 1; j <= i; j++) {      \r\n				System.out.print(j + \"*\" + i + \"=\" + j * i + \"    \");        \r\n				if (j * i < 10) {\r\n					System.out.print(\" \");\r\n				}\r\n			}         \r\n			System.out.println();    \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:09:55', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (649, '猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个     第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下     的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。', 1, 'public class lianxi17 {\r\n	public static void main(String[] args) {    \r\n		int x = 1;    \r\n		for (int i = 2; i <= 10; i++) {     \r\n			x = (x + 1) * 2;    \r\n		}    \r\n		System.out.println(\"猴子第一天摘了 \" + x + \" 个桃子\");\r\n	}\r\n}', '1', '2021-03-15 10:11:27', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (650, '有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前20项之和。', 1, 'public class lianxi20 {\r\n	public static void main(String[] args) {\r\n		   \r\n		int x = 2, y = 1, t;    \r\n		double sum = 0;    \r\n		for (int i = 1; i <= 20; i++) {\r\n			    \r\n			sum = sum + (double) x / y;     \r\n			t = y;     \r\n			y = x;     \r\n			x = y + t;     \r\n		}\r\n		System.out.println(\"前20项相加之和是： \" + sum);\r\n	}\r\n}', '1', '2021-03-15 10:11:54', '0', 1, 2, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (651, '求1+2!+3!+...+20!的和。', 1, 'public class lianxi21 {\r\n	public static void main(String[] args) {\r\n		   \r\n		long sum = 0;    \r\n		long fac = 1;    \r\n		for (int i = 1; i <= 20; i++) {    \r\n			fac = fac * i;     \r\n			sum += fac;    \r\n		}   \r\n		System.out.println(sum);\r\n	}\r\n}', '1', '2021-03-15 10:11:54', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (652, '利用递归方法求5!。', 1, 'public class lianxi22 {\r\n	public static void main(String[] args) {      \r\n		int n = 5;   \r\n		rec fr = new rec();   \r\n		System.out.println(n + \"! = \" + fr.rec(n));\r\n	}\r\n}\r\nclass rec {\r\n	public long rec(int n) {   \r\n		long value = 0;   \r\n		if (n == 1) {    \r\n			value = 1;   \r\n		} else   {    \r\n			value = n * rec(n - 1);   \r\n		}   \r\n		return value;\r\n	}\r\n}', '1', '2021-03-15 10:11:54', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (653, '有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？', 1, 'public class lianxi23 {\r\n	public static void main(String[] args) {   \r\n		int age = 10;    \r\n		for (int i = 2; i <= 5; i++) {    \r\n			age = age + 2;   \r\n		}   \r\n		System.out.println(age);\r\n	}\r\n}', '1', '2021-03-15 10:11:54', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (654, '给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。', 1, 'import java.util.*;\r\npublic class lianxi24 {\r\n	public static void main(String[] args) {  \r\n		Scanner s = new Scanner(System.in);  \r\n		System.out.print(\"请输入一个正整数：\");  \r\n		long a = s.nextLong();  \r\n		String ss = Long.toString(a);   \r\n		char[] ch = ss.toCharArray();   \r\n		int j = ch.length;   \r\n		System.out.println(a + \"是一个\" + j + \"位数。\");   \r\n		System.out.print(\"按逆序输出是：\");   \r\n		for (int i = j - 1; i >= 0; i--) {   \r\n			System.out.print(ch[i]);  \r\n		}  \r\n	}  \r\n}', '1', '2021-03-15 10:11:54', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (655, '一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。', 1, 'import java.util.*;\r\npublic class lianxi25a {\r\n	public static void main(String[] args) {  \r\n		Scanner s = new Scanner(System.in);  \r\n		boolean is = true;  \r\n		System.out.print(\"请输入一个正整数：\");  \r\n		long a = s.nextLong();  \r\n		String ss = Long.toString(a);  \r\n		char[] ch = ss.toCharArray();  \r\n		int j = ch.length;  \r\n		for (int i = 0; i < j / 2; i++) {  \r\n			if (ch[i] != ch[j - i - 1]) {\r\n				is = false;\r\n			}  \r\n		}  \r\n		if (is == true) {\r\n			System.out.println(\"这是一个回文数\");\r\n		}    \r\n		else {\r\n			System.out.println(\"这不是一个回文数\");\r\n		}   \r\n	}  \r\n}', '1', '2021-03-15 10:12:05', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (656, '求100之内的素数。', 1, 'public class lianxi27 {\r\n	public static void main(String[] args) {   \r\n		boolean b = false;   \r\n		System.out.print(2 + \" \");   \r\n		System.out.print(3 + \" \");   \r\n		for (int i = 3; i < 100; i += 2) {    \r\n			for (int j = 2; j <= Math.sqrt(i); j++) {     \r\n				if (i % j == 0) {\r\n					b = false;                     \r\n					break;      \r\n				} else {\r\n					b = true;\r\n				}    \r\n			}  \r\n			if (b == true) {\r\n				System.out.print(i + \" \");\r\n			}   \r\n		}  \r\n	}\r\n}\r\n//该程序使用除1位素数得2位方法，运行效率高通用性差。\r\npublic class lianxi27a {\r\n	public static void main(String[] args) {   \r\n		int[] a = new int[] {2,3,5,7};  \r\n		for (int j = 0; j < 4; j++) System.out.print(a[j] + \" \");   \r\n		boolean b = false;   \r\n		for (int i = 11; i < 100; i += 2) {    \r\n			for (int j = 0; j < 4; j++) {     \r\n				if (i % a[j] == 0) {\r\n					b = false;                     \r\n					break;      \r\n				} else {\r\n					b = true;\r\n				}    \r\n			}  \r\n			if (b == true) {\r\n				System.out.print(i + \" \");\r\n			}   \r\n		}  \r\n	}\r\n}', '1', '2021-03-15 10:12:05', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (657, '对10个数进行排序。', 1, 'import java.util.*;\r\npublic class lianxi28 {\r\n	public static void main(String[] args) {\r\n		Scanner s = new Scanner(System.in);  \r\n		int[] a = new int[10];  \r\n		System.out.println(\"请输入10个整数：\");  \r\n		for (int i = 0; i < 10; i++) {   \r\n			a[i] = s.nextInt();  \r\n		}  \r\n		for (int i = 0; i < 10; i++) {   \r\n			for (int j = i + 1; j < 10; j++) {    \r\n				if (a[i] > a[j]) {     \r\n					int t = a[i];     \r\n					a[i] = a[j];     \r\n					a[j] = t;    \r\n				}   \r\n			}  \r\n		}  \r\n		for (int i = 0; i < 10; i++) {   \r\n			System.out.print(a[i] + \" \");  \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:05', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (658, '求一个3*3矩阵对角线元素之和。', 1, 'import java.util.*;\r\npublic class lianxi29 {\r\n	public static void main(String[] args) {  \r\n		Scanner s = new Scanner(System.in);  \r\n		int[][] a = new int[3][3];\r\n		System.out.println(\"请输入9个整数：\");  \r\n		for (int i = 0; i < 3; i++) {   \r\n			for (int j = 0; j < 3; j++) {    \r\n				a[i][j] = s.nextInt();   \r\n			}  \r\n		}  \r\n		System.out.println(\"输入的3 * 3 矩阵是:\");  \r\n		for (int i = 0; i < 3; i++) {   \r\n			for (int j = 0; j < 3; j++) {    \r\n				System.out.print(a[i][j] + \" \");   \r\n			}   \r\n			System.out.println();  \r\n		}  \r\n		int sum = 0;  \r\n		for (int i = 0; i < 3; i++) {   \r\n			for (int j = 0; j < 3; j++) {    \r\n				if (i == j) {     \r\n					sum += a[i][j];    \r\n				}   \r\n			}  \r\n		}  \r\n		System.out.println(\"对角线之和是：\" + sum);\r\n	}\r\n}', '1', '2021-03-15 10:12:05', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (659, '有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。', 1, 'import java.util.*;\r\npublic class lianxi30 {\r\n	public static void main(String[] args) {\r\n		int[] a = new int[] {1,2,6,14,5,36,37,55};\r\n		int[] b = new int[a.length + 1];\r\n		int t1 = 0, t2 = 0;\r\n		int i = 0;\r\n		Scanner s = new Scanner(System.in);\r\n		System.out.print(\"请输入一个整数：\");\r\n		int num = s.nextInt();\r\n		if (num >= a[a.length - 1]) {\r\n			b[b.length - 1] = num;\r\n			for (i = 0; i < a.length; i++) {\r\n				b[i] = a[i];\r\n			}\r\n		} else {\r\n			for (i = 0; i < a.length; i++) {\r\n				if (num >= a[i]) {\r\n					b[i] = a[i];\r\n				} else {\r\n					b[i] = num;\r\n					break;\r\n				}\r\n			}\r\n			for (int j = i + 1; j < b.length; j++) {\r\n				b[j] = a[j - 1];\r\n			}\r\n		}\r\n		for (i = 0; i < b.length; i++) {\r\n			System.out.print(b[i] + \" \");\r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:05', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (660, '将一个数组逆序输出。', 1, 'import java.util.*;\r\npublic class lianxi31 {\r\n	public static void main(String[] args) {	  \r\n		Scanner s = new Scanner(System.in);   \r\n		int a[] = new int[20];\r\n		System.out.println(\"请输入多个正整数（输入-1表示结束）：\");   \r\n		int i = 0, j;   \r\n		do {    \r\n			a[i] = s.nextInt();     \r\n			i++;   \r\n		} while (a[i - 1] != -1);   \r\n		System.out.println(\"你输入的数组为：\");   \r\n		for (j = 0; j < i - 1; j++) {	   \r\n			System.out.print(a[j] + \"   \");\r\n		}  \r\n		System.out.println(\"\n数组逆序输出为：\");   \r\n		for (j = i - 2; j >= 0; j = j - 1) {   \r\n			System.out.print(a[j] + \"   \");\r\n		}   \r\n	}  \r\n}', '1', '2021-03-15 10:12:05', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (661, '取一个整数a从右端开始的4～7位。', 1, 'import java.util.*;\r\npublic class lianxi32 {\r\n	public static void main(String[] args) {  \r\n		Scanner s = new Scanner(System.in);    \r\n		System.out.print(\"请输入一个7位以上的正整数：\");    \r\n		long a = s.nextLong();    \r\n		String ss = Long.toString(a);    \r\n		char[] ch = ss.toCharArray();    \r\n		int j = ch.length;    \r\n		if (j < 7) {\r\n			System.out.println(\"输入错误！\");\r\n		}   \r\n		else {	    \r\n			System.out.println(\"截取从右端开始的4～7位是：\" + ch[j - 7] + ch[j - 6] + ch[j - 5] + ch[j - 4]);     \r\n		}   \r\n	}   \r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (662, '打印出杨辉三角形。（要求打印出10行如下图）  1   \r\n          1     1   \r\n        1    2    1   \r\n      1    3    3    1   \r\n   1    4    6    4    1   \r\n1     5    10   10   5    1  ', 1, 'public class lianxi33 {\r\n	public static void main(String[] args) {   \r\n		int[][] a = new int[10][10];   \r\n		for (int i = 0; i < 10; i++) {   \r\n			a[i][i] = 1;    \r\n			a[i][0] = 1;   \r\n		}  \r\n		for (int i = 2; i < 10; i++) {  \r\n			for (int j = 1; j < i; j++) {	    \r\n				a[i][j] = a[i - 1][j - 1] + a[i - 1][j];    \r\n			}  \r\n		}    \r\n		for (int i = 0; i < 10; i++) {   \r\n			for (int k = 0; k < 2 * (10 - i) - 1; k++) {	    \r\n				System.out.print(\" \");    \r\n			}   \r\n			for (int j = 0; j <= i; j++) {	    \r\n				System.out.print(a[i][j] + \"   \");    \r\n			}   \r\n			System.out.println();   \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 3, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (663, '输入3个数a,b,c，按大小顺序输出。', 1, 'import java.util.Scanner;\r\npublic class lianxi34 {\r\n	public static void main(String[] args) {	   \r\n		Scanner s = new Scanner(System.in);    \r\n		System.out.println(\"请输入3个整数：\");    \r\n		int a = s.nextInt();    \r\n		int b = s.nextInt();    \r\n		int c = s.nextInt();      \r\n		if (a < b) {    \r\n			int t = a;     \r\n			a = b;     \r\n			b = t;    \r\n		}     \r\n		if (a < c) {	    \r\n			int t = a;     \r\n			a = c;     \r\n			c = t;    \r\n		}    \r\n		if (b < c) {    \r\n			int t = b;     \r\n			b = c;     \r\n			c = t;    \r\n		}   \r\n		System.out.println(\"从大到小的顺序输出:\");    \r\n		System.out.println(a + \" \" + b + \" \" + c);\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (664, '输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。', 1, 'import java.util.*;\r\npublic class lianxi35 {\r\n	public static void main(String[] args) {\r\n		int N = 8;\r\n		int[] a = new int[N]; // 创建一个八个元素的数组\r\n		Scanner s = new Scanner(System.in);\r\n		int idx1 = 0, idx2 = 0;\r\n		System.out.println(\"请输入8个整数：\");\r\n		for (int i = 0; i < N; i++) {\r\n			a[i] = s.nextInt();\r\n		}\r\n		// 获得输入的八个数字\r\n		System.out.println(\"你输入的数组为：\");\r\n		for (int i = 0; i < N; i++) {\r\n			System.out.print(a[i] + \" \");\r\n		}\r\n		// 输出输入的数组\r\n		int max = a[0], min = a[0];\r\n		for (int i = 0; i < N; i++) {\r\n			if (a[i] > max) {\r\n				max = a[i];\r\n				idx1 = i;\r\n			}\r\n			// 找出最大的数和其下标\r\n			if (a[i] < min) {\r\n				min = a[i];\r\n				idx2 = i;\r\n			} // 找出最大的数和其下标\r\n		}\r\n		if (idx1 != 0) {\r\n			int temp = a[0];\r\n			a[0] = a[idx1];\r\n			a[idx1] = temp;\r\n		} // 最大的数和第一个数交换位置\r\n		if (idx2 != N - 1) {\r\n			int temp = a[N - 1];\r\n			a[N - 1] = a[idx2];\r\n			a[idx2] = temp;\r\n		} // 最小的数和最后一个数交换位置\r\n		System.out.println(\"\n交换后的数组为：\");\r\n		for (int i = 0; i < N; i++) {\r\n			System.out.print(a[i] + \" \");\r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (665, '有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。', 1, 'import java.util.Scanner;\r\npublic class lianxi36 {\r\n	public static void main(String[] args) {  \r\n		int N = 10;   \r\n		int[] a = new int[N];   \r\n		Scanner s = new Scanner(System.in);   \r\n		System.out.println(\"请输入10个整数：\");   \r\n		for (int i = 0; i < N; i++) {   \r\n			a[i] = s.nextInt();   \r\n		}  \r\n		System.out.print(\"你输入的数组为：\");   \r\n		for (int i = 0; i < N; i++) {	    \r\n			System.out.print(a[i] + \" \");   \r\n		}  \r\n		System.out.print(\"\n请输入向后移动的位数：\");   \r\n		int m = s.nextInt();   \r\n		int[] b = new int[m];   \r\n		for (int i = 0; i < m; i++) {   \r\n			b[i] = a[N - m + i];   \r\n		}  \r\n		for (int i = N - 1; i >= m; i--) {  \r\n			a[i] = a[i - m];   \r\n		}  \r\n		for (int i = 0; i < m; i++) {   \r\n			a[i] = b[i];   \r\n		}\r\n		System.out.print(\"位移后的数组是：\");   \r\n		for (int i = 0; i < N; i++) {	   \r\n			System.out.print(a[i] + \" \");   \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (666, '有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。', 1, 'import java.util.Scanner;\r\npublic class lianxi37 {\r\n	public static void main(String[] args) {  \r\n		Scanner s = new Scanner(System.in);   \r\n		System.out.print(\"请输入排成一圈的人数：\");   \r\n		int n = s.nextInt();   \r\n		boolean[] arr = new boolean[n];   \r\n		for (int i = 0; i < arr.length; i++) {	   \r\n			arr[i] = true;   \r\n		} //数组赋值都是true\r\n		  \r\n		int leftCount = n;   \r\n		int countNum = 0;   \r\n		int index = 0;   \r\n		while (leftCount > 1) {	   \r\n			if (arr[index] == true) {	    \r\n				countNum++;     \r\n				if (countNum == 3) {	     \r\n					countNum = 0;      \r\n					arr[index] = false;      \r\n					leftCount--;     \r\n				}   \r\n			}    \r\n			index++;     \r\n			if (index == n) {	    \r\n				index = 0;    \r\n			}  \r\n		}   \r\n		for (int i = 0; i < n; i++) {\r\n			if (arr[i] == true) {    \r\n				System.out.println(\"原排在第\" + (i + 1) + \"位的人留下了。\");    \r\n			}  \r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (667, '写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。', 1, 'import java.util.*;\r\npublic class lianxi38 {\r\n	public static void main(String[] args) {\r\n		   \r\n		Scanner s = new Scanner(System.in);    \r\n		System.out.println(\"请输入一个字符串：\");    \r\n		String str = s.nextLine();     \r\n		System.out.println(\"字符串的长度是：\" + str.length());    \r\n	}   \r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (668, '编写一个函数，输入n为偶数时，调用函数求1/2+1/4+...+1/n,当输入n为奇数时，调用函数1/1+1/3+...+1/n。(利用指针函数)', 1, 'import java.util.*;\r\npublic class lianxi39 {\r\n	public static void main(String[] args) {   \r\n		Scanner s = new Scanner(System.in);    \r\n		System.out.print(\"请输入一个正整数 n= \");    \r\n		int n = s.nextInt();    \r\n		System.out.println(\"相应数列的和为：\" + sum(n));   \r\n	}\r\n	public static double sum(int n) { \r\n		double res = 0;    \r\n		if (n % 2 == 0) {    \r\n			for (int i = 2; i <= n; i += 2) {	     \r\n				res += (double) 1 / i;     \r\n			}   \r\n		} else {   \r\n			for (int i = 1; i <= n; i += 2) {	     \r\n				res += (double) 1 / i;     \r\n			}   \r\n		}   \r\n		return res;\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 4, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (669, '字符串排序。', 1, 'public class lianxi40 {\r\n	public static void main(String[] args) {  \r\n		int N = 5;   \r\n		String temp = null;   \r\n		String[] s = new String[N];   \r\n		s[0] = \"matter\";   \r\n		s[1] = \"state\";   \r\n		s[2] = \"solid\";   \r\n		s[3] = \"liquid\";   \r\n		s[4] = \"gas\";   \r\n		for (int i = 0; i < N; i++) {   \r\n			for (int j = i + 1; j < N; j++) {	    \r\n				if (compare(s[i], s[j]) == false) {		     \r\n					temp = s[i];      \r\n					s[i] = s[j];      \r\n					s[j] = temp;     \r\n				}   \r\n			}  \r\n		}   \r\n		for (int i = 0; i < N; i++) {   \r\n			System.out.println(s[i]);   \r\n		}\r\n	}\r\n\r\n	static boolean compare(String s1, String s2) {  \r\n		boolean result = true;   \r\n		for (int i = 0; i < s1.length() && i < s2.length(); i++) {	   \r\n			if (s1.charAt(i) > s2.charAt(i)) {	    \r\n				result = false;     \r\n				break;    \r\n			} else if (s1.charAt(i) < s2.charAt(i)) {	    \r\n				result = true;     \r\n				break;    \r\n			} else {    \r\n				if (s1.length() < s2.length()) {	     \r\n					result = true;     \r\n				} else {	     \r\n					result = false;     \r\n				}   \r\n			}  \r\n		}  \r\n		return result;\r\n	}\r\n}', '1', '2021-03-15 10:12:21', '0', 1, 5, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (670, '海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？', 1, 'public class lianxi41 {\r\n	public static void main(String[] args) {\r\n		int i, m, j = 0, k, count;\r\n		for (i = 4; i < 10000; i += 4)   {\r\n			count = 0;     \r\n			m = i;     \r\n			for (k = 0; k < 5; k++)        {\r\n				        \r\n				j = i / 4 * 5 + 1;         \r\n				i = j;         \r\n				if (j % 4 == 0)            count++;            \r\n				else break;       \r\n			}   \r\n			i = m;\r\n			if (count == 4) {\r\n				System.out.println(\"原有桃子 \" + j + \" 个\");\r\n				break;\r\n			}\r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 5, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (671, '809??=800??+9??+1,其中??代表的两位数,8??的结果为两位数，9??的结果为3位数。求??代表的两位数，及809??后的结果。', 1, 'public class lianxi42 {\r\n	public static void main(String[] args) {\r\n		int a = 809, b, i;\r\n		for (i = 10; i < 13; i++) {\r\n			b = i * a;\r\n			if (8 * i < 100 && 9 * i >= 100) System.out.println(\"809*\" + i + \"=\" + \"800*\" + i + \"+\" + \"9*\" + i + \"=\" + b);\r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 5, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (672, '求0—7所能组成的奇数个数。', 1, 'public class lianxi43 {\r\n	public static void main(String[] args) {\r\n		int sum = 4;\r\n		int j;\r\n		System.out.println(\"组成1位数是 \" + sum + \" 个\");\r\n		sum = sum * 7;\r\n		System.out.println(\"组成2位数是 \" + sum + \" 个\");\r\n		for (j = 3; j <= 9; j++) {\r\n			sum = sum * 8;\r\n			System.out.println(\"组成\" + j + \"位数是 \" + sum + \" 个\");\r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 5, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (673, '一个偶数总能表示为两个素数之和。', 1, 'import java.util.*;\r\npublic class lianxi44 {\r\n	public static void main(String[] args) {\r\n		Scanner s = new Scanner(System.in);\r\n		int n, i;\r\n		do {    \r\n			System.out.print(\"请输入一个大于等于6的偶数：\");    \r\n			n = s.nextInt();   \r\n		} while (n < 6 || n % 2 != 0);   //判断输入是否是>=6偶数,不是,重新输入\r\n		fun fc = new fun();   \r\n		for (i = 2; i <= n / 2; i++) {   \r\n			if ((fc.fun(i)) == 1 && (fc.fun(n - i) == 1))  {\r\n				int j = n - i;    \r\n				System.out.println(n + \" = \" + i + \" + \" + j);    \r\n			} //输出所有可能的素数对  \r\n		}\r\n	}\r\n}\r\nclass fun {\r\n	public int fun(int a)  { //判断是否是素数的函数\r\n		int i, flag = 0;\r\n		if (a == 3) {\r\n			flag = 1;\r\n			return (flag);\r\n		}\r\n		for (i = 2; i <= Math.sqrt(a); i++) {  \r\n			if (a % i == 0) {\r\n				flag = 0;\r\n				break;\r\n			}     \r\n			else flag = 1;\r\n		}\r\n		return (flag); //不是素数,返回0,是素数,返回1\r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 6, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (674, '判断一个素数能被几个9整除。', 1, 'import java.util.*;\r\npublic class lianxi45 {\r\n	public static void main(String[] args) {  \r\n		Scanner s = new Scanner(System.in);  \r\n		System.out.print(\"请输入一个整数：\");   \r\n		int num = s.nextInt();   \r\n		int   tmp = num;   \r\n		int count = 0;      \r\n		for (int i = 0; tmp % 9 == 0;) {          \r\n			tmp = tmp / 9;           \r\n			count++;         \r\n		}    \r\n		System.out.println(num + \" 能够被 \" + count + \" 个9整除。\");    \r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 6, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (675, '两个字符串连接程序。', 1, 'public class lianxi46 {\r\n	public static void main(String[] args) {   \r\n		Scanner s = new Scanner(System.in);   \r\n		System.out.print(\"请输入一个字符串：\");   \r\n		String str1 = s.nextLine();   \r\n		System.out.print(\"请再输入一个字符串：\");   \r\n		String str2 = s.nextLine();   \r\n		String str = str1 + str2;   \r\n		System.out.println(\"连接后的字符串是：\" + str);   \r\n	}   \r\n}', '1', '2021-03-15 10:12:34', '0', 1, 7, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (676, '读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。', 1, 'import java.util.*;\r\npublic class lianxi47 {\r\n	public static void main(String[] args) {\r\n		Scanner s = new Scanner(System.in);\r\n		int n = 1, num;\r\n		while (n <= 7) {        \r\n			do {         \r\n				System.out.print(\"请输入一个1--50之间的整数：\");            \r\n				num = s.nextInt();          \r\n			} while (num < 1 || num > 50);     \r\n			for (int i = 1; i <= num; i++)      {\r\n				System.out.print(\"*\");     \r\n			}\r\n			System.out.println();\r\n			n++;\r\n		}\r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 7, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (677, '某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。', 1, 'import java.util.*;\r\npublic class lianxi48   {\r\n	public static void main(String args[]) {\r\n		Scanner s = new Scanner(System.in);\r\n		int num = 0, temp;\r\n		do {  \r\n			System.out.print(\"请输入一个4位正整数：\");     \r\n			num = s.nextInt();    \r\n		} while (num < 1000 || num > 9999);\r\n		int a[] = new int[4];\r\n		a[0] = num / 1000; //取千位的数字\r\n		a[1] = (num / 100) % 10; //取百位的数字\r\n		a[2] = (num / 10) % 10; //取十位的数字\r\n		a[3] = num % 10; //取个位的数字\r\n		for (int j = 0; j < 4; j++) {\r\n			a[j] += 5;\r\n			a[j] %= 10;\r\n		}\r\n		for (int j = 0; j <= 1; j++) {   \r\n			temp = a[j];   \r\n			a[j] = a[3 - j];   \r\n			a[3 - j] = temp;   \r\n		}\r\n		System.out.print(\"加密后的数字为：\");\r\n		for (int j = 0; j < 4; j++) \r\n			System.out.print(a[j]);\r\n	}\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 8, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (678, '计算字符串中子串出现的次数 。', 1, 'import java.util.*;\r\npublic class lianxi49 {\r\n    public static void main(String args[]) {\r\n        Scanner s = new Scanner(System.in);\r\n        System.out.print(\"请输入字符串：\");\r\n        String str1 = s.nextLine();\r\n        System.out.print(\"请输入子串：\");\r\n        String str2 = s.nextLine();\r\n        int count = 0;\r\n        if (str1.equals(\"\") || str2.equals(\"\")) {\r\n            System.out.println(\"你没有输入字符串或子串,无法比较!\");\r\n            System.exit(0);\r\n        } else {\r\n            for (int i = 0; i <= str1.length() - str2.length(); i++) {\r\n                if (str2.equals(str1.substring(i, str2.length() + i))) //这种比法有问题，会把\"aaa\"看成有2个\"aa\"子串。\r\n                    count++;\r\n            }\r\n            System.out.println(\"子串在字符串中出现: \" + count + \" 次\");\r\n        }\r\n    }\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 8, NULL, 1, NULL);
INSERT INTO `tab_route` VALUES (679, '有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，把原有的数据和计算出的平均分数存放在磁盘文件 \"stud \"中。', 1, 'import java.io.*;\r\nimport java.util.*;\r\npublic class lianxi50 {\r\n    public static void main(String[] args) {\r\n        Scanner ss = new Scanner(System.in);\r\n        String[][] a = new String[5][6];\r\n        for (int i = 1; i < 6; i++) {\r\n            System.out.print(\"请输入第\" + i + \"个学生的学号：\");\r\n            a[i - 1][0] = ss.nextLine();\r\n            System.out.print(\"请输入第\" + i + \"个学生的姓名：\");\r\n            a[i - 1][1] = ss.nextLine();\r\n            for (int j = 1; j < 4; j++) {\r\n                System.out.print(\"请输入该学生的第\" + j + \"个成绩：\");\r\n                a[i - 1][j + 1] = ss.nextLine();\r\n            }\r\n            System.out.println(\"\n\");\r\n        }\r\n        //以下计算平均分\r\n        float avg;\r\n        int sum;\r\n        for (int i = 0; i < 5; i++) {\r\n            sum = 0;\r\n            for (int j = 2; j < 5; j++) {\r\n                sum = sum + Integer.parseInt(a[i][j]);\r\n            }\r\n            avg = (float) sum / 3;\r\n            a[i][5] = String.valueOf(avg);\r\n        }\r\n        //以下写磁盘文件\r\n        String s1;\r\n        try {\r\n            File f = new File(\"C:\\stud\");\r\n            if (f.exists()) {\r\n                System.out.println(\"文件存在\");\r\n            } else {\r\n                System.out.println(\"文件不存在，正在创建文件\");\r\n                f.createNewFile(); //不存在则创建\r\n\r\n            }\r\n            BufferedWriter output = new BufferedWriter(new FileWriter(f));\r\n            for (int i = 0; i < 5; i++) {\r\n                for (int j = 0; j < 6; j++) {\r\n                    s1 = a[i][j] + \"\r\n\";\r\n                    output.write(s1);\r\n                }\r\n            }\r\n            output.close();\r\n            System.out.println(\"数据已写入c盘文件stud中！\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}', '1', '2021-03-15 10:12:34', '0', 1, 7, NULL, 1, NULL);

-- ----------------------------
-- Table structure for tab_route_img
-- ----------------------------
DROP TABLE IF EXISTS `tab_route_img`;
CREATE TABLE `tab_route_img`  (
  `rgid` int(0) NOT NULL AUTO_INCREMENT,
  `rid` int(0) NOT NULL,
  `bigPic` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `smallPic` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`rgid`) USING BTREE,
  INDEX `FK_route_routeimg`(`rid`) USING BTREE,
  CONSTRAINT `FK_route_routeimg` FOREIGN KEY (`rid`) REFERENCES `tab_route` (`rid`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 2091 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tab_seller
-- ----------------------------
DROP TABLE IF EXISTS `tab_seller`;
CREATE TABLE `tab_seller`  (
  `sid` int(0) NOT NULL AUTO_INCREMENT,
  `sname` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `consphone` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `address` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`sid`) USING BTREE,
  UNIQUE INDEX `AK_Key_2`(`sname`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tab_seller
-- ----------------------------
INSERT INTO `tab_seller` VALUES (1, '张通', '13342463979', '无锡');

-- ----------------------------
-- Table structure for tab_user
-- ----------------------------
DROP TABLE IF EXISTS `tab_user`;
CREATE TABLE `tab_user`  (
  `uid` int(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `birthday` date NULL DEFAULT NULL,
  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `telephone` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `code` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`uid`) USING BTREE,
  UNIQUE INDEX `AK_nq_username`(`username`) USING BTREE,
  UNIQUE INDEX `AK_nq_code`(`code`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tab_user
-- ----------------------------
INSERT INTO `tab_user` VALUES (24, '123', '123', '余生', '2021-03-11', '男', '13342463979', '204237998@qq.com', 'Y', '38a0a3d3224743b8902db5498a2aad81');
INSERT INTO `tab_user` VALUES (25, '13342463979', '1373726446zt', 'zhnasi1', '2021-03-11', '女', '13342463979', '204237998@qq.com', 'N', NULL);

SET FOREIGN_KEY_CHECKS = 1;
